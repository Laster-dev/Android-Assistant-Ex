<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!-- 深色主题基础颜色 -->
    <SolidColorBrush x:Key="PrimaryBackground" Color="#2E2E2E"/>
    <SolidColorBrush x:Key="SecondaryBackground" Color="#333333"/>
    <SolidColorBrush x:Key="BorderBrush" Color="#555555"/>
    <SolidColorBrush x:Key="PrimaryForeground" Color="White"/>
    <SolidColorBrush x:Key="DisabledForeground" Color="#888888"/>
    <SolidColorBrush x:Key="HoverBrush" Color="#444444"/>
    <SolidColorBrush x:Key="PressedBrush" Color="#555555"/>
    <SolidColorBrush x:Key="SelectedBrush" Color="#555555"/>
    <!-- 多彩配色：主题色点缀用 -->
    <SolidColorBrush x:Key="HighlightBrush" Color="#7C3AED"/>
    <!-- 主色：紫蓝 -->
    <SolidColorBrush x:Key="SuccessBrush" Color="#10B981"/>
    <!-- 绿色 -->
    <SolidColorBrush x:Key="InfoBrush" Color="#3B82F6"/>
    <!-- 蓝色 -->
    <SolidColorBrush x:Key="WarningBrush" Color="#F59E0B"/>
    <!-- 橙色 -->

    <!--分割线FF444444-->
    <SolidColorBrush x:Key="SeparatorBrush" Color="#444444"/>
    <!--窗口颜色-->
    <SolidColorBrush x:Key="WindowBackground" Color="#252525"/>
    <!--标题栏的按钮-->
    <Style x:Key="ControlButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Ellipse x:Name="ellipse" Fill="{TemplateBinding Background}" Width="20" Height="20" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Canvas HorizontalAlignment="Center" VerticalAlignment="Center" Width="20" Height="20">
                            <ContentPresenter/>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ellipse" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Tag}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ellipse" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- CheckBox 样式 -->
    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <StackPanel Orientation="Horizontal">
                        <Border x:Name="border" Width="20" Height="20" CornerRadius="3" BorderBrush="#555555" BorderThickness="1" Background="#333333">
                            <Border.RenderTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                            </Border.RenderTransform>
                            <Grid>
                                <Path x:Name="checkMark" Data="M0,5 L2,7 L7,0" Stroke="Transparent" StrokeThickness="2" StrokeEndLineCap="Round" StrokeStartLineCap="Round" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Grid>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" Margin="5,0,0,0" VerticalAlignment="Center"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#444444"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="#444444"/>
                            <Setter TargetName="checkMark" Property="Stroke" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="#888888"/>
                            <Setter TargetName="border" Property="Background" Value="#555555"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#666666"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LinkButton" TargetType="Button">
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <ContentPresenter x:Name="contentPresenter" 
                              Content="{TemplateBinding Content}" 
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              VerticalAlignment="Center"
                              RenderTransformOrigin="0.5,0.5">
                            <ContentPresenter.Resources>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="TextDecorations" Value="Underline" />
                                    <!-- 添加条件触发器，在按钮禁用时移除下划线 -->
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="False">
                                            <Setter Property="TextDecorations" Value="{x:Null}" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentPresenter.Resources>
                            <!-- 添加用于缩放动画的RenderTransform -->
                            <ContentPresenter.RenderTransform>
                                <ScaleTransform x:Name="contentScale" ScaleX="1" ScaleY="1" />
                            </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- 按钮被按下时的动画 -->
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="contentScale" 
                                             Storyboard.TargetProperty="ScaleX" 
                                             To="0.9" Duration="0:0:0.1" />
                                        <DoubleAnimation Storyboard.TargetName="contentScale" 
                                             Storyboard.TargetProperty="ScaleY" 
                                             To="0.9" Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="contentScale" 
                                             Storyboard.TargetProperty="ScaleX" 
                                             To="1" Duration="0:0:0.1" />
                                        <DoubleAnimation Storyboard.TargetName="contentScale" 
                                             Storyboard.TargetProperty="ScaleY" 
                                             To="1" Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <!-- 添加按钮禁用时的样式 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FFADADAD" />
                            <!-- 灰色前景 -->
                            <Setter Property="Opacity" Value="0.6" />
                            <!-- 降低透明度 -->
                            <Setter Property="Cursor" Value="Arrow" />
                            <!-- 使用默认箭头光标 -->
                            <Setter TargetName="contentPresenter" Property="Effect">
                                <Setter.Value>
                                    <BlurEffect Radius="0.5" />
                                    <!-- 轻微模糊效果 -->
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="{StaticResource InfoBrush}" />
        <Setter Property="Cursor" Value="Hand" />

        <!-- 添加样式触发器，以便可以在Style级别处理禁用状态 -->
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#FFADADAD" />
                <!-- 灰色前景，与模板触发器一致 -->
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- Button 样式 -->
    <Style TargetType="Button">
        <Setter Property="Background" Value="#333333"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="BorderBrush" Value="#555555"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5" RenderTransformOrigin="0.5,0.5">
                            <Border.RenderTransform>
                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                            </Border.RenderTransform>
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                    <GradientStop x:Name="GradientStop1" Color="#333333" Offset="0"/>
                                    <GradientStop x:Name="GradientStop2" Color="#333333" Offset="1"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Color" To="#444444" Duration="0:0:0.3"/>
                                        <ColorAnimation Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Color" To="#444444" Duration="0:0:0.3"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="GradientStop1" Storyboard.TargetProperty="Color" To="#333333" Duration="0:0:0.3"/>
                                        <ColorAnimation Storyboard.TargetName="GradientStop2" Storyboard.TargetProperty="Color" To="#333333" Duration="0:0:0.3"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#555555"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                        <GradientStop Color="#3A3A3A" Offset="0"/>
                                        <GradientStop Color="#2A2A2A" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="border" Property="BorderBrush" Value="#444444"/>
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.6"/>
                            <Setter Property="Foreground" Value="#888888"/>
                            <Setter Property="Cursor" Value="No"/>
                            <Setter TargetName="border" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect ShadowDepth="0" BlurRadius="0" Color="#000000" Opacity="0.2"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="border" Property="ToolTip" Value="此按钮当前不可用"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="Button.PreviewMouseLeftButtonDown">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="0.95" Duration="0:0:0.1"/>
                                    <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="0.95" Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="Button.PreviewMouseLeftButtonUp">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" To="1" Duration="0:0:0.1"/>
                                    <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" To="1" Duration="0:0:0.1"/>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToggleButton 样式 -->
    <Style x:Key="DarkModernToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border x:Name="border"
                            CornerRadius="0,5,5,0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- 鼠标悬停触发 -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#444444"/>
                        </Trigger>
                        <!-- 按压触发 -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#555555"/>
                        </Trigger>
                        <!-- 选中状态触发 -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#555555"/>
                        </Trigger>
                        <!-- 禁用状态触发 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="#333333"/>
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox 样式 -->
    <Style TargetType="ComboBox">
        <!-- 基本属性设置，与 Button 样式保持一致 -->
        <Setter Property="Background" Value="#333333"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="BorderBrush" Value="#555555"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <!-- 主边框 -->
                        <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5">
                            <Grid>
                                <!-- 显示选中项 -->
                                <ContentPresenter 
                            Margin="5,0,25,0" 
                            VerticalAlignment="Center" 
                            HorizontalAlignment="Left"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"/>

                                <!-- 下拉按钮 -->
                                <ToggleButton x:Name="ToggleButton"
                                      Focusable="False"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press"
                                      HorizontalAlignment="Right"
                                      Width="20"
                                      Background="Transparent"
                                      BorderBrush="Transparent"
                                      Style="{StaticResource DarkModernToggleButtonStyle}">
                                    <Path Data="M 0 0 L 4 4 L 8 0 Z" 
                                  Fill="White" 
                                  HorizontalAlignment="Center" 
                                  VerticalAlignment="Center"/>
                                </ToggleButton>
                            </Grid>
                        </Border>

                        <!-- 整个控件的下拉按钮 -->
                        <ToggleButton x:Name="MainToggleButton"
                              Focusable="False"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              ClickMode="Press"
                              Background="Transparent"
                              BorderBrush="Transparent"
                              Style="{StaticResource DarkModernToggleButtonStyle}"
                              HorizontalAlignment="Stretch"
                              VerticalAlignment="Stretch"
                              Opacity="0"/>

                        <!-- 下拉弹出层 -->
                        <Popup x:Name="Popup"
                       Placement="Bottom"
                       IsOpen="{TemplateBinding IsDropDownOpen}"
                       AllowsTransparency="True"
                       Focusable="False"
                       PopupAnimation="Fade"
                       Width="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}">
                            <Border 
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="1"
                        CornerRadius="5"
                        SnapsToDevicePixels="True">
                                <ScrollViewer Margin="4" 
                                      SnapsToDevicePixels="True">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>

                    <!-- 控件模板触发器 -->
                    <ControlTemplate.Triggers>
                        <!-- 下拉展开触发 -->
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#444444"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="#666666"/>
                        </Trigger>

                        <!-- 控件禁用触发 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#888888"/>
                            <Setter Property="Background" Value="#333333"/>
                            <Setter Property="BorderBrush" Value="#555555"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBoxItem 样式 -->
    <Style TargetType="ComboBoxItem">
        <!-- 基本属性设置 -->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border x:Name="Border"
                    Background="{TemplateBinding Background}"
                    Padding="{TemplateBinding Padding}"
                    SnapsToDevicePixels="True"
                    CornerRadius="5">
                        <!-- 添加圆角 -->
                        <ContentPresenter 
                    HorizontalAlignment="Stretch" 
                    VerticalAlignment="Center" 
                    RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- 鼠标悬停触发 -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#444444"/>
                        </Trigger>
                        <!-- 选中状态触发 -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#555555"/>
                        </Trigger>
                        <!-- 禁用状态触发 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#888888"/>
                            <Setter TargetName="Border" Property="Background" Value="#333333"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 容器样式 -->
    <Style x:Key="ModernContainerStyle" TargetType="Border">
        <Setter Property="Background" Value="#2E2E2E"/>
        <Setter Property="BorderBrush" Value="#555555"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="8"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="#000000" BlurRadius="10" ShadowDepth="2" Opacity="0.5"/>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Thumb 样式 (用于滑块控件) -->
    <Style x:Key="DarkThumbStyle" TargetType="Thumb">
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Background" Value="#777777"/>
        <Setter Property="BorderBrush" Value="#999999"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Ellipse Fill="{TemplateBinding Background}" 
                     Stroke="{TemplateBinding BorderBrush}" 
                     StrokeThickness="{TemplateBinding BorderThickness}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Slider 样式 -->
    <Style TargetType="Slider">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="#333333"/>
        <Setter Property="BorderBrush" Value="#555555"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <Grid VerticalAlignment="Center">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!-- 滑轨和拇指 -->
                        <Grid VerticalAlignment="Center">
                            <Rectangle Fill="#555555" Height="4" VerticalAlignment="Center" Margin="0,0,0,0"/>
                            <Track x:Name="PART_Track"
                           Minimum="{TemplateBinding Minimum}" 
                           Maximum="{TemplateBinding Maximum}" 
                           Value="{TemplateBinding Value}"
                           IsDirectionReversed="False">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="Slider.DecreaseLarge" 
                                          Style="{x:Null}"
                                          IsEnabled="False"
                                          Opacity="0"/>
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource DarkThumbStyle}" VerticalAlignment="Center"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="Slider.IncreaseLarge" 
                                          Style="{x:Null}"
                                          IsEnabled="False"
                                          Opacity="0"/>
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- 边框动画 -->
    <Storyboard x:Key="BorderBrushAnimation">
        <ColorAnimation
            Storyboard.TargetName="border"
            Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"
            From="#555555"
            To="#1F6FEB"
            Duration="0:0:0.5">
            <ColorAnimation.EasingFunction>
                <SineEase EasingMode="EaseInOut"/>
            </ColorAnimation.EasingFunction>
        </ColorAnimation>
    </Storyboard>

    <!-- TextBox 样式 -->
    <Style TargetType="TextBox">
        <Setter Property="Background" Value="#333333"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="BorderBrush" Value="#555555"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="SelectionBrush" Value="#CCCCCC"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <!-- 主边框 -->
                        <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="7">
                            <ScrollViewer x:Name="PART_ContentHost" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- 控件获得焦点触发 -->
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#444444"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="#666666"/>
                        </Trigger>
                        <!-- 控件禁用触发 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#888888"/>
                            <Setter Property="Background" Value="#333333"/>
                            <Setter Property="BorderBrush" Value="#555555"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="UIElement.GotKeyboardFocus">
                            <BeginStoryboard Storyboard="{StaticResource BorderBrushAnimation}"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TabControl 样式 -->
    <Style TargetType="TabControl">
        <Setter Property="Background" Value="#2E2E2E"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderBrush" Value="#555555"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel"
                                  Background="{TemplateBinding Background}"
                                  Grid.Row="0"
                                  IsItemsHost="True"
                                  Margin="0"/>
                        <Border Background="#444444" Grid.Row="1" Padding="5">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              Margin="0"
                                              ContentSource="SelectedContent"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TabItem 样式 -->
    <Style TargetType="TabItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderBrush" Value="#555555"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="7,7,0,0"
                                Padding="5,2">
                            <ContentPresenter x:Name="ContentSite"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Center"
                                              ContentSource="Header"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- 鼠标悬停触发 -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#444444"/>
                        </Trigger>
                        <!-- 选中状态触发 -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#555555"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#666666"/>
                        </Trigger>
                        <!-- 禁用状态触发 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#888888"/>
                            <Setter TargetName="Border" Property="Background" Value="#2E2E2E"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#555555"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RadioButton 样式 -->
    <Style TargetType="RadioButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Grid>
                        <StackPanel Orientation="Horizontal">
                            <!-- 自定义的新颖按钮 -->
                            <Border x:Name="RadioButtonBorder"
                                    Width="20" Height="20"
                                    CornerRadius="10"
                                    BorderBrush="#AAAAAA"
                                    BorderThickness="2"
                                    Background="Transparent"
                                    Margin="0,0,5,0">
                                <Ellipse x:Name="RadioButtonEllipse"
                                         Width="12" Height="12"
                                         Fill="Transparent"/>
                            </Border>
                            <ContentPresenter x:Name="ContentSite"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Center"
                                              ContentSource="Content"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- 鼠标悬停触发 -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="RadioButtonBorder" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                        <GradientStop Color="#555555" Offset="0.0"/>
                                        <GradientStop Color="#666666" Offset="1.0"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!-- 选中状态触发 -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="RadioButtonEllipse" Property="Fill">
                                <Setter.Value>
                                    <RadialGradientBrush GradientOrigin="0.5,0.5" Center="0.5,0.5" RadiusX="0.5" RadiusY="0.5">
                                        <GradientStop Color="#AAAAAA" Offset="0.0"/>
                                        <GradientStop Color="#777777" Offset="1.0"/>
                                    </RadialGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!-- 禁用状态触发 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#888888"/>
                            <Setter TargetName="RadioButtonBorder" Property="BorderBrush" Value="#888888"/>
                            <Setter TargetName="RadioButtonEllipse" Property="Fill" Value="#888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ListBox 样式 -->
    <Style TargetType="ListBox">
        <Setter Property="Background" Value="#333333"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="BorderBrush" Value="#555555"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="5">
                        <ScrollViewer Margin="4" SnapsToDevicePixels="True">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ListBoxItem 样式 -->
    <Style TargetType="ListBoxItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border"
                Background="{TemplateBinding Background}"
                Padding="{TemplateBinding Padding}"
                SnapsToDevicePixels="True"
                CornerRadius="5">
                        <ContentPresenter
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center"
                    RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- 鼠标悬停触发 -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#444444"/>
                        </Trigger>
                        <!-- 选中状态触发 -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#555555"/>
                        </Trigger>
                        <!-- 禁用状态触发 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#888888"/>
                            <Setter TargetName="Border" Property="Background" Value="#333333"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Label 样式 -->
    <Style TargetType="Label">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Label">
                    <Border
                Background="{TemplateBinding Background}"
                Padding="{TemplateBinding Padding}"
                CornerRadius="5">
                        <ContentPresenter
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    RecognizesAccessKey="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource PrimaryForeground}"/>
        <Setter Property="Margin" Value="10,5"/>
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>
    <!-- ProgressBar 样式 -->
    <Style TargetType="ProgressBar">
        <Setter Property="Background" Value="#333333"/>
        <Setter Property="Foreground" Value="#5E5E5E"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Grid>
                        <!-- 背景 -->
                        <Border
                    Background="{TemplateBinding Background}"
                    CornerRadius="5">
                            <Border
                        x:Name="PART_Track"
                        Background="{TemplateBinding Background}"
                        CornerRadius="5"/>
                        </Border>
                        <!-- 进度条 -->
                        <Border
                    x:Name="PART_Indicator"
                    Background="#5E5E5E"
                    CornerRadius="5"
                    HorizontalAlignment="Left"
                    Width="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- 更新进度条宽度 -->
                        <Trigger Property="Value" Value="0">
                            <Setter TargetName="PART_Indicator" Property="Width" Value="0"/>
                        </Trigger>
                        <Trigger Property="Value" Value="100">
                            <Setter TargetName="PART_Indicator" Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Value}" Value="50">
                            <Setter TargetName="PART_Indicator" Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- PasswordBox 样式 -->
    <Style TargetType="PasswordBox">
        <Setter Property="Background" Value="#333333"/>
        <Setter Property="Foreground" Value="#D4D4D4"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="BorderBrush" Value="#555555"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="CaretBrush" Value="White"/>
        <Setter Property="SelectionBrush" Value="#CCCCCC"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Grid>
                        <!-- 主边框 -->
                        <Border x:Name="border"
              Background="{TemplateBinding Background}"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              CornerRadius="7">
                            <ScrollViewer x:Name="PART_ContentHost" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- 控件获得焦点触发 -->
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#444444"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="#666666"/>
                        </Trigger>
                        <!-- 控件禁用触发 -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#888888"/>
                            <Setter Property="Background" Value="#333333"/>
                            <Setter Property="BorderBrush" Value="#555555"/>
                        </Trigger>
                        <EventTrigger RoutedEvent="UIElement.GotKeyboardFocus">
                            <BeginStoryboard Storyboard="{StaticResource BorderBrushAnimation}"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Calendar 样式 -->
    <Style TargetType="Calendar">
        <Setter Property="Background" Value="#2B2B2B"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Calendar">
                    <Border
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="5">
                        <Grid>
                            <CalendarItem x:Name="PART_CalendarItem" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- CalendarDayButton 样式 -->
    <Style TargetType="CalendarDayButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarDayButton">
                    <Border x:Name="Border"
                Background="{TemplateBinding Background}"
                Padding="{TemplateBinding Padding}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="5"
                SnapsToDevicePixels="True">
                        <ContentPresenter
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- 鼠标悬停触发 -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#444444"/>
                        </Trigger>
                        <!-- 今天日期触发 -->
                        <Trigger Property="IsToday" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#666666"/>
                        </Trigger>
                        <!-- 选中状态触发 -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Calendar}, Path=SelectedDate}">
                            <Setter TargetName="Border" Property="Background" Value="#0094FF"/>
                        </DataTrigger>
                        <!-- 当前月份日期按钮背景为白色，文字为黑色 -->
                        <DataTrigger Binding="{Binding IsCurrentMonth}" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#FFFFFF"/>
                            <Setter Property="Foreground" Value="#000000"/>
                        </DataTrigger>
                        <!-- 非当前月份日期按钮背景为浅灰色，文字为白色 -->
                        <DataTrigger Binding="{Binding IsCurrentMonth}" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#A9A9A9"/>
                            <Setter Property="Foreground" Value="#FFFFFF"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- CalendarButton 样式 -->
    <Style TargetType="CalendarButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CalendarButton">
                    <Border x:Name="Border"
                Background="{TemplateBinding Background}"
                Padding="{TemplateBinding Padding}"
                SnapsToDevicePixels="True"
                CornerRadius="5">
                        <ContentPresenter
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- 鼠标悬停触发 -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#444444"/>
                        </Trigger>
                        <!-- 选中状态触发 -->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Calendar}, Path=SelectedDate}">
                            <Setter TargetName="Border" Property="Background" Value="#0094FF"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>